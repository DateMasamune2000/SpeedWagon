/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.speedwagon.cargo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for a simple Speedwagon Payload */
@org.apache.avro.specific.AvroGenerated
public class Payload extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5780354506643030405L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payload\",\"namespace\":\"org.speedwagon.cargo\",\"doc\":\"Schema for a simple Speedwagon Payload\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"publisher\",\"type\":\"string\"},{\"name\":\"topic\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Payload> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payload> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Payload> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Payload> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Payload> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Payload to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Payload from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Payload instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Payload fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int id;
  private int age;
  private java.lang.CharSequence publisher;
  private java.lang.CharSequence topic;
  private java.lang.CharSequence content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payload() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param age The new value for age
   * @param publisher The new value for publisher
   * @param topic The new value for topic
   * @param content The new value for content
   */
  public Payload(java.lang.Integer id, java.lang.Integer age, java.lang.CharSequence publisher, java.lang.CharSequence topic, java.lang.CharSequence content) {
    this.id = id;
    this.age = age;
    this.publisher = publisher;
    this.topic = topic;
    this.content = content;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return age;
    case 2: return publisher;
    case 3: return topic;
    case 4: return content;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: publisher = (java.lang.CharSequence)value$; break;
    case 3: topic = (java.lang.CharSequence)value$; break;
    case 4: content = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'publisher' field.
   * @return The value of the 'publisher' field.
   */
  public java.lang.CharSequence getPublisher() {
    return publisher;
  }


  /**
   * Sets the value of the 'publisher' field.
   * @param value the value to set.
   */
  public void setPublisher(java.lang.CharSequence value) {
    this.publisher = value;
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.CharSequence getTopic() {
    return topic;
  }


  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.CharSequence value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public java.lang.CharSequence getContent() {
    return content;
  }


  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /**
   * Creates a new Payload RecordBuilder.
   * @return A new Payload RecordBuilder
   */
  public static org.speedwagon.cargo.Payload.Builder newBuilder() {
    return new org.speedwagon.cargo.Payload.Builder();
  }

  /**
   * Creates a new Payload RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payload RecordBuilder
   */
  public static org.speedwagon.cargo.Payload.Builder newBuilder(org.speedwagon.cargo.Payload.Builder other) {
    if (other == null) {
      return new org.speedwagon.cargo.Payload.Builder();
    } else {
      return new org.speedwagon.cargo.Payload.Builder(other);
    }
  }

  /**
   * Creates a new Payload RecordBuilder by copying an existing Payload instance.
   * @param other The existing instance to copy.
   * @return A new Payload RecordBuilder
   */
  public static org.speedwagon.cargo.Payload.Builder newBuilder(org.speedwagon.cargo.Payload other) {
    if (other == null) {
      return new org.speedwagon.cargo.Payload.Builder();
    } else {
      return new org.speedwagon.cargo.Payload.Builder(other);
    }
  }

  /**
   * RecordBuilder for Payload instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payload>
    implements org.apache.avro.data.RecordBuilder<Payload> {

    private int id;
    private int age;
    private java.lang.CharSequence publisher;
    private java.lang.CharSequence topic;
    private java.lang.CharSequence content;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.speedwagon.cargo.Payload.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.publisher)) {
        this.publisher = data().deepCopy(fields()[2].schema(), other.publisher);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.topic)) {
        this.topic = data().deepCopy(fields()[3].schema(), other.topic);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.content)) {
        this.content = data().deepCopy(fields()[4].schema(), other.content);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Payload instance
     * @param other The existing instance to copy.
     */
    private Builder(org.speedwagon.cargo.Payload other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publisher)) {
        this.publisher = data().deepCopy(fields()[2].schema(), other.publisher);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.topic)) {
        this.topic = data().deepCopy(fields()[3].schema(), other.topic);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.content)) {
        this.content = data().deepCopy(fields()[4].schema(), other.content);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'publisher' field.
      * @return The value.
      */
    public java.lang.CharSequence getPublisher() {
      return publisher;
    }


    /**
      * Sets the value of the 'publisher' field.
      * @param value The value of 'publisher'.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder setPublisher(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.publisher = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'publisher' field has been set.
      * @return True if the 'publisher' field has been set, false otherwise.
      */
    public boolean hasPublisher() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'publisher' field.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder clearPublisher() {
      publisher = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.CharSequence getTopic() {
      return topic;
    }


    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder setTopic(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.topic = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public java.lang.CharSequence getContent() {
      return content;
    }


    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.content = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public org.speedwagon.cargo.Payload.Builder clearContent() {
      content = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payload build() {
      try {
        Payload record = new Payload();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.publisher = fieldSetFlags()[2] ? this.publisher : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.topic = fieldSetFlags()[3] ? this.topic : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.content = fieldSetFlags()[4] ? this.content : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payload>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payload>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payload>
    READER$ = (org.apache.avro.io.DatumReader<Payload>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeInt(this.age);

    out.writeString(this.publisher);

    out.writeString(this.topic);

    out.writeString(this.content);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.age = in.readInt();

      this.publisher = in.readString(this.publisher instanceof Utf8 ? (Utf8)this.publisher : null);

      this.topic = in.readString(this.topic instanceof Utf8 ? (Utf8)this.topic : null);

      this.content = in.readString(this.content instanceof Utf8 ? (Utf8)this.content : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.age = in.readInt();
          break;

        case 2:
          this.publisher = in.readString(this.publisher instanceof Utf8 ? (Utf8)this.publisher : null);
          break;

        case 3:
          this.topic = in.readString(this.topic instanceof Utf8 ? (Utf8)this.topic : null);
          break;

        case 4:
          this.content = in.readString(this.content instanceof Utf8 ? (Utf8)this.content : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










